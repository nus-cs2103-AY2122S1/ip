package duke.main;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.Timer;
import java.util.TimerTask;

import duke.task.Storage;

/**
 * Drives the main logic of the program.
 */
public class Duke {

    /** Storage that is responsible for saving and loading information from your hard disk into a TaskList */
    private static Storage storage;
    /** Parser that handles and interprets user input in order to perform appropriate actions */
    private static Parser parser;

    /**
     * Constructs a Duke instance to initialise fields required to drive the program.
     * At the same time, copies any previous saved file into the list upon initialisation.
     */
    public Duke() {
        TaskList taskList = new TaskList();
        storage = new Storage(taskList);
        parser = new Parser(taskList);

        storage.copyFromFileToList();
    }

    /**
     * Returns the logo of Gary.
     *
     * @return String representing the logo of Gary.
     */
    public String getGreeting() {
        return "Meow! My name is Gary, how can I help you?";
    }

    /**
     * Generates a response according to user input.
     * The response is generated by saving the printed standard output into a stream and returning it as a string.
     *
     * @param input User input obtained from GUI.
     * @return String that represents the response of Duke.
     */
    public String getResponse(String input) {
        // Solution adapted from:
        // https://stackoverflow.com/questions/8708342/redirect-console-output-to-string-in-java

        // Create a stream to hold the output
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(outputStream);

        // IMPORTANT: Save the old System.out!
        PrintStream old = System.out;

        // Tell Java to use your special stream
        System.setOut(printStream);

        // Handle input: Any printed output goes to your special stream
        parser.handleInput(input);
        storage.writeToFile();

        // Put things back
        System.out.flush();
        System.setOut(old);

        // Return what was printed
        return outputStream.toString();
    }

    /**
     * Exits the application and program after half a second so that users will see the goodbye message before leaving.
     */
    public static void exit() {
        new Timer().schedule(new TimerTask() {
            public void run () {
                System.exit(0);
            }
        }, 500);
        System.out.println("Goodbye :( Sad to see you go! Hope to see you again!");
    }
}

